---
import { CollectionEntry, getCollection } from 'astro:content';
import Document from '../../layouts/Document.astro';

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const objectEntries = await getCollection('objects');
  return objectEntries.map(entry => ({
    params: { anomaly: entry.slug }, props: { entry },
  }));
}

// 2. When it's time to render, you can get the entry directly from the prop
const { entry } = Astro.props;
const { Content } = await entry.render();

const allObjects = await getCollection('objects');

// Get list of all entries with the same name as the current entry
// Sort ascending by version number
const displayName = entry.data.name.replaceAll('.','');
const objectVersions = allObjects.filter((e) => e.data.name == displayName);
const sortedVersions = objectVersions.sort((a, b) => a.data.version - b.data.version);
const latestVersion = sortedVersions[sortedVersions.length - 1];
const latestVersionSlug = latestVersion.slug;
const isOldVersion = entry.data.version != latestVersion.data.version;

// Find next and previous entry in the collection
// Only includes entries whose slug does not end with "vX"
const objectEntries = allObjects.filter((e) => e.slug.match(/v\d+$/) === null);
const visibleEntries = objectEntries.filter((e) => e.data.visibility === 'visible' || e.data.visibility === undefined);
const currentIndex = visibleEntries.findIndex((e) => e.slug == latestVersionSlug);
const prevEntry: CollectionEntry<'objects'>|undefined = visibleEntries[currentIndex - 1];
const nextEntry: CollectionEntry<'objects'>|undefined = visibleEntries[currentIndex + 1];

import { remark } from 'remark';
import remarkMdx from 'remark-mdx';
import AnchorTooltip from '../../components/tooltip-types/AnchorTooltip.astro';
import Breadcrumbs from '../../components/Breadcrumbs.astro';
import BannerRecolor from '../../components/BannerRecolor.astro';

const ast = remark().use(remarkMdx).parse(entry.body);
const headings = ast.children
  .map(node => (node.type == 'heading' && node.children[0].type == 'text') ?
    { depth:node.depth, name:node.children[0].value, link:'#'+node.children[0].value.replaceAll(' ', '-').toLowerCase() } : null)
  .filter(result => result !== null);

let typeThumb: string|undefined = undefined;
switch (entry.data.category) {
  case 'Catastrophic': typeThumb = '/thumbnail-catastrophic.png'; break;
  case 'Apollyon': typeThumb = '/thumbnail-apollyon.png'; break;
  case 'Esau': typeThumb = '/thumbnail-esau.png'; break;
  case 'Yaaqov': typeThumb = '/thumbnail-yaaqov.png'; break;
}
---
<Document title={entry.data.title} desc={entry.data.description} addKeywords={entry.data.tags} thumb={typeThumb}>
    <BannerRecolor containmentClass={entry.data.category}/>
    <aside id="left">
    <section id="outline">
      <h2>{entry.data.title}</h2>
      <ol>
        {headings.map(heading => <li><a href={heading.link}><Fragment set:html={'&nbsp;'.repeat((heading.depth - 2) * 2)}/>{heading.name}</a></li>)}
      </ol>
    </section>
    {entry.data.related.length > 0 &&
      <section id="related">
        <h2>Related</h2>
        <ol>
          {entry.data.related.map((rel: { link: string; name: string; }) => <li><a href={rel.link}>{rel.name}</a></li>)}
        </ol>
      </section>
    }
  </aside>

  <article>
    <Breadcrumbs/>
    <div id="hrgroup">
      <h1>{entry.data.title}</h1>

      <span id="file-history">
        {sortedVersions.length > 1 && sortedVersions.map(v => <a href={v.slug!=entry.slug ? `/objects/${v.slug}/` : ''}>V{v.data.version}{v.slug == latestVersionSlug ? <span class="hide-on-skinny"> (latest)</span> : ''}</a>)}
      </span>
    </div>
    {isOldVersion &&
        <b style="font-size:smaller;color:var(--color-accent-light)">NOTICE: You are reading an outdated version of this document</b>
    }
    {entry.data.draft && <div class="stamp-of-incompletion">OOC: THIS DOCUMENT IS A DRAFT.<br/>CONTENTS ARE LIKELY TO CHANGE.</div>}
    <p>
      <b>{displayName}:</b> {entry.data.title} (<AnchorTooltip href={"class/"+entry.data.category.toLowerCase()}>{entry.data.category}</AnchorTooltip>)
    </p>

    <Content/>
    {entry.data.draft && <div class="stamp-of-incompletion">DOCUMENT IS INCOMPLETE</div>}

    <footer style="text-align: center;margin-block:2em">
      { prevEntry &&
        <>&laquo; <a href={`/objects/${prevEntry.slug}/`}>{prevEntry.data.name}</a> prev</>
      }
      &bull;
      { nextEntry &&
        <>next <a href={`/objects/${nextEntry.slug}/`}>{nextEntry.data.name}</a> &raquo;</>
      }
    </footer>
  </article>

  <aside id="comments">
    {entry.data.comments}
  </aside>

  <!-- <script>
    // Move comments to the 'comments' aside
    // Make sure comments are at the same offset height as they appear in the markdown
    const main = document.querySelector('main');
    const mainTop = main.offsetTop;
    const commentSection = document.getElementById('comments');
    const comments = document.querySelectorAll('.comment');
    let mustClear = mainTop;
    comments.forEach((comment: HTMLElement, i: number) => {
      comment.style.position = 'absolute';
      // Get the offset height of the object
      const offset = comment.offsetTop - mainTop - comment.offsetHeight / 2;
      commentSection.appendChild(comment)
      comment.style.top = offset+'px';
      // Move down if overlapping the previous comment
      if (i > 0) {
        const prevComment = comments[i-1] as HTMLElement;
        if (mustClear < prevComment.offsetTop) mustClear = prevComment.offsetTop;
        mustClear += prevComment.offsetHeight + 10;
        if (comment.offsetTop < mustClear) {
          comment.style.top = mustClear+'px';
        }
      }
    });
  </script> -->
</Document>
