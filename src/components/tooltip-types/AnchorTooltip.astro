---
import TooltipNoteSingle from './TooltipNoteSingle.astro';
import TooltipNoteMulti from './TooltipNoteMulti.astro';
import { CollectionEntry, getCollection } from 'astro:content';

interface Props {
    href: string;
}
const { href } = Astro.props;

const tooltips: CollectionEntry<'tooltips'>[] = await getCollection('tooltips');
let src: CollectionEntry<'tooltips'>|undefined = undefined;
for (let e of tooltips) {
    if (e.slug == href) {
        src = e;
        break;
    }
}
const exists: boolean = src !== undefined;
let category = 'unknown';

if (exists) {
    // Before first slash is category, after is name
    const categoryPrefix = src.slug.split('/')[0];
    switch (categoryPrefix) {
        case 'ocp': category = 'Anomalous Object'; break;
        case 'staff': category = 'Staff'; break;
        case 'mtf': category = 'Task Force'; break;
        case 'site': category = 'Containment Site'; break;
        default: category = 'unknown'; break;
    }
}
---
{exists ? (
    <span class='tooltip'>
        <span id='tooltip-name'><slot /></span>
        <span class="tooltiptext" aria-label="tooltip">
            <span class="tooltip-bubble">
                <span class="comment-name">{category}</span>
                <span class="tooltip-name" set:html={src.data.name}></span>
                <Fragment set:html={src.data.description}></Fragment>
                <br/>
                <a href={src.data.link}>read document</a>
            </span>
            {src.data.notes &&
                (Array.isArray(src.data.notes)
                    ? <TooltipNoteMulti notes={src.data.notes} />
                    : <TooltipNoteSingle note={src.data.notes} />)
            }
        </span>
    </span>
) : <a href={href} style="text-decoration: 1px dotted underline;"><slot/></a>}
