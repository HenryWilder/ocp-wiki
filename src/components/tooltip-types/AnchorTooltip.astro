---
import TooltipNoteSingle from './TooltipNoteSingle.astro';
import TooltipNoteMulti from './TooltipNoteMulti.astro';
import tooltipInfo from '../../../public/data/reference.json';
interface Info {
    name: string;
    description: string;
    link?: string;
    notes?: string|string[];
}
const tooltipInfoMap: { [category: string]: { category: string, items:{ [id: string]: Info } } } = tooltipInfo;

interface Props {
    href: string;
}
const { href } = Astro.props;
const jsonPath = href.split('/');

const src: Info|undefined = tooltipInfoMap[jsonPath[0]]?.items[jsonPath[1]];
const exists = src !== undefined;

let category = 'unknown';
if (exists) {
    category = tooltipInfoMap[jsonPath[0]].category;
}

const additionalClasses: string[] = (jsonPath[0] === 'class') ? [jsonPath[1]] : [];
---
{exists ? <span class='tooltip'><span class:list={['tooltip-text',...additionalClasses]}><slot/></span><span class="tooltip-content" aria-label="tooltip">
            <span class="tooltip-bubble">
                <span class="comment-name">{category}</span>
                <span class="tooltip-name" set:html={src.name}></span>
                <Fragment set:html={src.description}></Fragment>
                {src.link &&
                    <br/>
                    <a href={src.link}>read document</a>
                }
            </span>
            {src.notes &&
                (Array.isArray(src.notes)
                    ? <TooltipNoteMulti notes={src.notes}/>
                    : <TooltipNoteSingle note={src.notes}/>)
            }
        </span></span>
 : <Fragment set:html={`<!-- TODO: Add '${href.substring(0, href.indexOf('/'))}["${href.substring(href.indexOf('/')+1)}"]' to reference.json -->`}></Fragment><slot/>}
