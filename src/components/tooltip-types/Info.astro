---
import Tooltip from "./Tooltip.astro";

import type { ITooltipBase } from "../../scripts/index";
let list: ITooltipBase[] = [];
interface ISharedTooltipInfo {
    category: string;
    path: string;
    linkText: string;
}
let sharedInfo: ISharedTooltipInfo = { category:"", path:"", linkText:"" };

import containmentSites from "../../../public/data/containment-sites.json";
import objects from "../../../public/data/objects.json";
import staff from "../../../public/data/staff.json";
import taskForces from "../../../public/data/task-forces.json";

interface Props {
    type: string;
    id: string;
}
const { type, id } = Astro.props;

switch (type) {
    case "site":
        list = containmentSites;
        sharedInfo = { category:"Containment Site", path:`/info/containment-sites.html#${id}`, linkText:"" };
        break;
    case "ocp":
        list = objects;
        sharedInfo = { category:"Anomalous Object", path:`/objects/${id.substring(id.indexOf("ocp-")+1)}.html`, linkText:"read document" };
        break;
    case "staff":
        list = staff;
        sharedInfo = { category:"Staff Member", path:`/info/staff.html#${id}`, linkText:"" };
        break;
    case "mtf":
        list = taskForces;
        sharedInfo = { category:"Mobile Task Force", path:`/info/task-forces.html#${id}`, linkText:"" };
        break;

    default:
        throw new Error(`Type "${type}" is not specialized`);
}

const tryInfo: ITooltipBase|undefined = list.find(element => element.id == id);
if (tryInfo === undefined) throw new Error(`Cannot find "${id}" in ${type} json`);
const info: ITooltipBase = tryInfo;
---
<Tooltip category={sharedInfo.category} name={info.name} tagline={info.tagline} path={sharedInfo.path} linkText={sharedInfo.linkText}>
    <slot />
</Tooltip>
